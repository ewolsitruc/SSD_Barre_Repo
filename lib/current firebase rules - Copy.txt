rules_version = '2';

// --- Firestore Rules ---
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      // Ensure the user document exists and isAdmin field is true
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).exists() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users Collection Rules
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      // Allow admins to update any user's document, OR allow a user to update their own document
      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);

      // NEW: Subcollection to store chat rooms a user is part of
      match /user_chats/{chatRoomId} {
        // A user can read and write to their own list of associated chat rooms.
        // This document will typically just hold a reference or a boolean flag.
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // Announcements Collection Rules (for global announcements)
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Events Collection Rules
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Troupes Collection Rules
    match /troupes/{troupeId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAdmin();
      // Allow updates only for admins or for non-admin users changing only 'viewCount'
      allow update: if isAdmin() ||
                     (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['viewCount']));

      // Subcollection for Troupe-Specific Announcements
      match /announcements/{announcementId} {
        // Authenticated users can read all announcements within any troupe's subcollection
        allow read: if isAuthenticated();
        allow create: if false; // Deny direct client creation (only via Cloud Function)
        allow update, delete: if isAdmin();
      }
    }

    // Join Requests Collection Rules
    match /joinRequests/{requestId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // UPDATED: Inlined the isAdmin check for robust query evaluation
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || // User can read their own request
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).exists() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true) // Inlined admin check
      );
      allow update, delete: if isAdmin();
    }

    // Posts Collection Rules
    match /posts/{postId} {
      allow read: if isAuthenticated();
      // Allow creating posts if admin or if authenticated user is assigned to the troupe/sub-troupe
      allow create: if isAdmin() ||
      (
        isAuthenticated() &&
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedGroups is list && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedGroups.hasAny([request.resource.data.troupeId])) ||
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedSubgroups is list && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedSubgroups.hasAny([request.resource.data.troupeId]))
      );
      // Allow updates if admin, author, or for specific reaction/commentCount fields
      allow update: if isAdmin() ||
                     (isAuthenticated() && request.auth.uid == resource.data.createdBy) ||
                     (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions', 'reactedBy'])) ||
                     (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount']));
      // Allow deleting posts if admin or author
      allow delete: if isAdmin() ||
                     (isAuthenticated() && request.auth.uid == resource.data.createdBy);

      // Comments subcollection rules within posts
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && request.resource.data.createdBy == request.auth.uid;
        // Allow update if comment author or for specific reaction fields
        allow update: if isAuthenticated() && request.auth.uid == resource.data.createdBy ||
                      (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions', 'reactedBy']));
        // Allow delete if admin or comment author
        allow delete: if isAdmin() ||
                      (isAuthenticated() && request.auth.uid == resource.data.createdBy);
      }
    }

    // Direct Messages Collection Rules
    match /chat_rooms/{chatRoomId} {
      // Allow read/update if authenticated and a participant in the chat room.
      // This works because the chatRoomId is expected to be userId1_userId2,
      // allowing a direct check against the UID.
      allow read, update: if isAuthenticated() && (chatRoomId.split('_')[0] == request.auth.uid || chatRoomId.split('_')[1] == request.auth.uid);
      // Allow create only if authenticated, participants list has 2 UIDs, and current user is one of them.
      allow create: if isAuthenticated() &&
                       request.resource.data.participants is list &&
                       request.resource.data.participants.size() == 2 &&
                       request.auth.uid in request.resource.data.participants;
      // Messages subcollection within a chat room
      match /messages/{messageId} {
        // Allow read if authenticated and part of the chat room (based on chatRoomId).
        allow read: if isAuthenticated() && (chatRoomId.split('_')[0] == request.auth.uid || chatRoomId.split('_')[1] == request.auth.uid);
        // Allow create if authenticated, sender is current user, and part of the chat room.
        allow create: if isAuthenticated() && request.resource.data.senderUid == request.auth.uid && (chatRoomId.split('_')[0] == request.auth.uid || chatRoomId.split('_')[1] == request.auth.uid);
        allow update, delete: if false; // Messages are generally immutable after creation.
      }
    }

    // Default catch-all rule for Firestore: deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// --- Firebase Storage Rules ---
service firebase.storage {
  match /b/{bucket}/o {
    // General rule: Allow authenticated users to read any file.
    // Be cautious with this if you have sensitive files that shouldn't be publicly viewable by all logged-in users.
    allow read: if request.auth != null;

    // Specific rule for profile images:
    // Authenticated users can read and write files ONLY within their own {userId} folder
    // inside the 'profile_images' directory.
    match /profile_images/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Default rule for all other paths:
    // Deny all writes to any other path in storage unless explicitly allowed by another rule above.
    match /{allPaths=**} {
      allow write: if false;
    }
  }
}